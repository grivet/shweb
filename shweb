#!/usr/bin/env sh

# defaults, can be overloaded in site.conf

# Output format of date for human consumption
: "${DATE_FMT:="--iso-8601"}"

# Default name of directory containing publications
# Will be reflected in output hierarchy.
: "${POSTS_DIR:="posts"}"

# Default nav menu
: "${NAV_MENU:="
/about.html: about
"}"

# Enable RSS feed
: "${RSS:="/feed.xml"}"

# Meta data separator
: "${META:="-->"}"

# opts

usage () {
    echo "Usage: $(basename "$0") [-h|--help] [input dir]"
    exit "${1:-1}"
}

for arg ; do
case "$arg" in
--help|-h) usage 0; shift ;;
esac
done

# Used to abort execution from sub-shells.
trap "exit 1" USR1
PROC=$$
abort() {
    [ "$1" ] && echo "$@" >&2
    kill -USR1 $PROC
}

# longest common prefix
# $1=/a/b/c/d $2=/a/b/e/f => /a/b/
lcprefix() { printf "%s\n%s\n" "$1" "$2" | sed -e 'N;s/^\(.*\).*\n\1.*$/\1/'; }

# takes canonical, absolute path as inputs,
# prints relative path from dir $1 to file|dir $2
relpath() {(
    if [ "$1" = "/" ]; then src=""; else src="$1"; fi
    p=$(lcprefix "$src" "$2")
    [ "${src#${p}}" ] || printf "./"
    printf "%s" "${src#${p%/}}" |sed 's;[^/]*$;;' |sed 's;[^/]*/;../;g'
    printf "%s" "${2#/${p#/}}" |sed 's;^/;;'
)}

# print the relative path from file $1 to file|dir $2
relhreff() {(
    src=${1%/*}
    # cleanup target
    tgt=${2%*index.htm*}
    tgt=${tgt%/}
    relpath "$src" "$tgt"
)}

# Extract metadata
# $1: source file
# $2: metadata name
meta_data() { sed "/^${META}$/q" "$1" | grep "^${2}:" |  sed "s/${2}:[[:space:]]\?//" | head -1; }

# get date metadata
meta_date() {(
    d=$(meta_data "$1" date)
    [ -z "$d" ] && echo "@$(stat -c %Y "$1")"
    echo "$d"
)}

# get date metadata - HTML element
meta_date_fmt() {(
    d="$(meta_date "$1")"
    echo "<time datetime=\"$(date -d "$d" --iso-8601)\">$(date -d "$d" ${DATE_FMT})</time>"
)}

# get summary metadata
meta_summary() { meta_data "$1" summary; }

# get summary metadata - HTML element
meta_summary_fmt() {
    s="$(meta_summary "$1")"
    [ -z "$s" ] && return
    echo "<div class=\"description\">$s</div>"
}

# get title metadata
meta_title() { meta_data "$1" title; }

# get title metadata - HTML element
# TODO: currently only support '# ', add support for other title forms.
meta_title_fmt() {(
    t="$(meta_title "$1")"
    [ -z "$t" ] && t="$(grep -e '^# ' "$1" | head -1 | cut -d' ' -f2-)"
    echo "$t"
)}

pub_title() { grep -e '^# ' "$1" | head -1 | cut -d' ' -f2-; }

# List all CSS files, using relative path from $1
style() {
    find "${IDIR}" -name "*.css" | while read -r css; do
        cat <<_style
    <link rel="stylesheet" href="$(relhreff "$1" "$css")"/>
_style
    done
}

favicon() {
    if [ -f "${IDIR}/favicon.ico" ]; then
        echo "<link rel=\"icon\" href=\"$(relhreff "$1" "${IDIR}/favicon.ico")\" type=\"image/x-icon\"/>"
    else
        echo "<link rel=\"icon\" href=\"data:,\"/>"
    fi
}

feed() {
    if [ "${RSS}" ]; then
        echo "<a href=\"$(relhreff "$1" "${IDIR}${RSS}")\">rss</a>"
    fi
}

nav_menu() {(
    IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}" # protect trailing \n
    for line in $NAV_MENU; do
        path="$(echo "$line" | cut -d: -f1)"
        name="$(echo "$line" | cut -d: -f2)"
        echo "<a href=\"$(relhreff "$1" "${IDIR}${path}")\">${name}</a>"
    done
)}

# Return true if $1 is an article
is_post() {
    if [ "${1#${IDIR}/${POSTS_DIR}/$(basename "$1")}y" = 'y' ] && [ -f "$1" ]; then
        return 0
    else
        return 1
    fi
}

header() {
    cat <<_header
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    $(favicon "$1")
    <title>${SITE_TITLE}$(is_post "$1" && echo " | $(meta_title_fmt "$1")")</title>
$(style "$1")
</head>
<body>
    <header>
        <div>
            <a href="$(relhreff "$1" "${IDIR}/")">Home</a>
        </div>
        <div>
            $(nav_menu "$1")
            $(feed "$1")
        </div>
    </header>
_header
}

footer() {
    cat <<_footer
</body>
</html>
_footer
}

# print file with metadata removed
metaless_cat() {
    if grep -q -- "^${META}$" "$1"; then
        awk "p; /^${META}$/{p=1}" "$1"
    else
        cat "$1"
    fi
}

md2html() {(
    cat <<_main
$(header "$1")

<main>
    <div class="title">
        <h1>$(meta_title_fmt "$1")</h1>
        $(is_post "$1" && meta_date_fmt "$1")
    </div>
$(metaless_cat "$1" | sed -e '/^# /d' | $MD2HTML)
</main>

$(footer "$1")
_main
)}

# list_file helper printing a file list.
print_sorted_file_list() {
    # Print all .md files from input POSTS_DIR,
    # reverse sort on date: field within,
    # print name translated to output dir.
    find "${IDIR}${1}" -maxdepth 1 -type f -name '*.md' | \
        while read -r f; do
            printf "%s:%s\n" "$(date -d "$(meta_date "$f")" --iso-8601)" "$f"
        done | sort -r | cut -d: -f2
}

# List .html files 1 depth under a path.
# $1: name of index listing the files.
# $2: name of directory being listed.
list_files() {(
    print_sorted_file_list "$2" | while read -r src; do
        tgt=$(echo "$src" | sed 's;.md;.html;')
        cat <<_file
    <div>
        <h1><a href="$(relhreff "${IDIR}$1" "${tgt}")">$(meta_title_fmt "$src")</a></h1>
        $(meta_date_fmt "$src")
        $(meta_summary_fmt "$src")
    </div>
_file
    done
)}

# Generate an index of content below.
# $1: name of index being generated.
# $2: root of content being listed.
# $3: output file
create_index() {
    idir_rel_path="${IDIR}$1"
    echo "* $3"
    cat <<_main > "$3"
$(header "$idir_rel_path")

<main class="list">
$(list_files "$1" "$2")
</main>

$(footer "$idir_rel_path")
_main
}

list_items() {(
    print_sorted_file_list "$1" | while read -r src; do
        tgt=$(echo "$src" | sed 's;.md;.html;')
        cat <<_item
    <item>
        <title>$(meta_title_fmt "$src")</title>
        <link>${SITE_URL}${1}/$(basename "$tgt")</link>
        <pubDate>$(date -d "$(meta_date "$src")" --utc)</pubDate>

        <guid>${SITE_URL}${1}/$(basename "$tgt")</guid>
        <description>$(meta_summary "$src")</description>
    </item>
_item
    done
)}

# Generate an RSS feed of publications
# $1: name of content being listed.
# $2: output file
create_feed() {
    echo "* $2"
    cat <<_rss > "$2"
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>${SITE_TITLE}</title>
    <link>${SITE_URL}</link>
    <description>Recent content on ${SITE_TITLE}</description>
    <generator>shweb</generator>
    <lastBuildDate>$(date --utc)</lastBuildDate>

    <atom:link href="${SITE_URL}${RSS}" rel="self" type="application/rss+xml" />

$(list_items "$1")

  </channel>
</rss>
_rss
}

IDIR="$(readlink -f "${1:-${PWD}}")"
if [ ! -f "${IDIR}/site.conf" ]; then
    abort "configuration file ${IDIR}/site.conf not found."
fi
# shellcheck source=/dev/null
. "${IDIR}/site.conf"

ABORT=''
for var in SITE_TITLE SITE_URL OUTPUT_DIR MD2HTML; do
    if [ ! "$(eval "echo \$$var")" ]; then
        echo "$var is not set." >&2
        ABORT=y
    fi
done
[ "$ABORT" ] && abort "Missing mandatory option, abort."

if [ -z "$POSTS_DIR" ] || [ ! -d "${IDIR}/$POSTS_DIR" ]; then
    abort "POSTS_DIR is not set or not a directory.
POSTS_DIR must point to a directory containing articles to list on the homepage."
fi

ODIR="$(readlink -f "$OUTPUT_DIR")"
if [ -z "$ODIR" ]; then
    abort "OUTPUT_DIR must be defined in your site.conf"
fi

if [ "$ODIR" = "$IDIR" ]; then
    abort "Unsafe output dir $ODIR, abort."
fi

rm -rf "$ODIR"
mkdir -p "$ODIR"

find "${IDIR}" -type f \
    -not -path "${IDIR}/.*" \
    -not -name '*.md' \
    -not -name 'site.conf' | while read -r f; do
    o="${ODIR}${f#${IDIR}*}"
    mkdir -p "$(dirname "$o")"
    echo "* $f -> $o"
    cp "$f" "$o"
done

find "${IDIR}" -iname '*.md' -print | while read -r f; do
( \
    o="${ODIR}$(echo "${f#${IDIR}*}" | sed 's;.md;.html;')"
    echo "* $f -> $o"
    mkdir -p "$(dirname "$o")"
    md2html "$f" > "$o"
) &
done

wait

create_index "/index.html" "/${POSTS_DIR}" "${ODIR}/index.html"
create_index "/${POSTS_DIR}/index.html" "/${POSTS_DIR}" "${ODIR}/${POSTS_DIR}/index.html"

[ "$RSS" ] && create_feed "/${POSTS_DIR}" "${ODIR}${RSS}"
